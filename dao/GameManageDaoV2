package com.gdufs.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class GameManageDao {
	//检查比赛名是否存在
	public boolean checkName(String gameName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "select * from gdufs.game where gameName='"+gameName+"';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			if(rs.next()) {
				return true;
			}
			else {
				return false;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return true;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//查找某个主办方正在举办正在举办的赛事
	public ArrayList findGameNow(String name) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.game where hold='"+name+"' and status!='已结束'";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				String gameName = rs.getString("gameName");
				list.add(gameName);
			}
			return list;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//查找某个主办方举办的已经结束的赛事
	public ArrayList findGameEnd(String name) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.game where hold='"+name+"' and status='已结束'";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				String gameName = rs.getString("gameName");
				list.add(gameName);
			}
			return list;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//新建比赛存入比赛表中
	public boolean addGame(String gameName,Date startTime,String type,String status,int number,String hold) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "insert into gdufs.game values('"+gameName+"','"+startTime+"','"+type+"','"+status+"','"+number+"','"+hold+"');";
		
		try {
			stat = con.prepareStatement(sql);
			int i = stat.executeUpdate();
			if(i<=0) {
				return false;
			}
			else {
				return true;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return false;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//查询某个比赛的赛事级别（院级，校级，自由组队）
	public String getGameType(String gameName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "select * from gdufs.game where gameName='"+gameName+"';";
		String gameType = null;
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				gameType = rs.getString("type");
			}
		} catch (SQLException e) {
			e.getStackTrace();
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
		return gameType;
	}
	
	//比赛结束，改变比赛状态
	public boolean getStatus(String gameName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "update gdufs.game set status='结束' where gameName='"+gameName+"';";
		
		try {
			stat = con.prepareStatement(sql);
			int i = stat.executeUpdate();
			if(i<=0) {
				return false;
			}
			else {
				return true;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return false;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//需要新建一个待办事务表，主办方用来处理球队报名请求，球队用来处理主办方邀请比赛请求
	//主办方邀请球队加入比赛或球队报名参赛，暂未获得对方同意的情况下：参加比赛的球队插入到球队-比赛表中，审核状态为'未审核'
	/*public boolean addTeam(String gameName,String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "insert into gdufs.teamGame values('"+gameName+"','"+teamName+"','存活','','未审核');";
		
		try {
			stat = con.prepareStatement(sql);
			int i = stat.executeUpdate();
			if(i<=0) {
				return false;
			}
			else {
				return true;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return false;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}*/
	
	//主办方与球队私下谈妥，直接把某支队加入到某个比赛中
	public boolean addTeam(String gameName,String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "insert into gdufs.teamgame values('"+gameName+"','"+teamName+"','存活','');";
		
		try {
			stat = con.prepareStatement(sql);
			int i = stat.executeUpdate();
			if(i<=0) {
				return false;
			}
			else {
				return true;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return false;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//主办方邀请球队参加比赛
	/*public boolean applyA(String gameName,String teamName,String hold) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "insert into gdufs.things values('"+gameName+"','"+teamName+"','"+hold+"','邀请');";
		
		try {
			stat = con.prepareStatement(sql);
			int i = stat.executeUpdate();
			if(i>0) {
				return true;
			}
			else {
				return false;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return false;
		} finally {
			
		}
	}*/
	
	//球队报名参加某项比赛
	public boolean apply(String gameName,String teamName,String hold) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "insert into gdufs.apply values('"+gameName+"','"+teamName+"','"+hold+"','未处理');";
		
		try {
			stat = con.prepareStatement(sql);
			int i = stat.executeUpdate();
			if(i>0) {
				return true;
			}
			else {
				return false;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return false;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//主办方进入主页时显示待处理的比赛报名
	public ArrayList getThings1(String hold) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.apply where hold='"+hold+"' and status='未处理';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				list.add(rs.getString("teamName"));
			}
			return list;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
		
	//球队进入主页时显示待处理的赛事邀请信息
	/*public ArrayList getThings2(String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.things where teamName='"+teamName+"' and type='邀请';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				list.add(rs.getString("gameName"));
			}
			return list;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			
		}
	}*/
		
	//主办方同意，在球队-比赛表中插入该队的纪录，用上面的addTeam方法，并且把报名表中该条报名记录的status改为同意
	//主办方拒绝，只需把报名表中该条报名记录的status改为拒绝
	public boolean approve(String gameName,String teamName,String status) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "update gdufs.apply set status='"+status+"' where gameName='"+gameName+"' and teamName='"+teamName+"';";
		
		try {
			stat = con.prepareStatement(sql);
			int i = stat.executeUpdate();
			if(i>0) {
				return true;
			}
			else {
				return false;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return false;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	
	
	//主办方同意或球队同意，改变球队-比赛表中参加某个比赛的某个球队的审核状态为已通过
	/*public boolean approveTeam(String gameName,String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "update gdufs.teamGame set approval='已审核' where gameName='"+gameName+"' and teamName='"+teamName+"';";
		
		try {
			stat = con.prepareStatement(sql);
			int i = stat.executeUpdate();
			if(i<=0) {
				return false;
			}
			else {
				return true;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return false;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}*/
	
	//球队淘汰或者比赛结束，改变该球队在该比赛中的状态
	public boolean updateTeamStatus(String gameName,String teamName,int rank) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "update gdufs.teamGame set status='结束',rank='"+rank+"' where gameName='"+gameName+"' and teamName='"+teamName+"';";
		
		try {
			stat = con.prepareStatement(sql);
			int i = stat.executeUpdate();
			if(i<=0) {
				return false;
			}
			else {
				return true;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return false;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//get到某个比赛中已经确定加入的队伍
	public ArrayList getTeamAdded(String gameName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.teamgame where gameName='"+gameName+"';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				list.add(rs.getString("teamName"));
			}
			return list;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//get某个比赛已经报名但是未处理的球队
	public ArrayList getTeamApplayed(String gameName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.apply where gameName='"+gameName+"' and status='未处理'";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				list.add(rs.getString("teamName"));
			}
			return list;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//get可以加入某个比赛的队伍，下拉列表供用户选择
	public ArrayList getTeamLeft(String teamType) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = null;
		if(teamType=="free") {
			sql = "select * from gdufs.user where status='active';";
		}
		else {
			sql = "select * from gdufs.user where status='active' and teamType='"+teamType+"';";
		}
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				list.add(rs.getString("userName"));
			}
			return list;
		} catch (SQLException e) {			
			System.out.println(e.getMessage());
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//注：保留球队报名参加比赛的功能，删除主办方邀请球队的功能
	
	//检查某支球队是否已经被添加
	public boolean checkAdd(String gameName,String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "select * from gdufs.teamgame where gameName='"+gameName+"' and teamName='"+teamName+"';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				return true;
			}
			return false;
		} catch (SQLException e) {
			e.getStackTrace();
			return true;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//检查某支球队是否已经报名
	public boolean checkApply(String gameName,String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "select * from gdufs.apply where gameName='"+gameName+"' and teamName='"+teamName+"' and status='未处理';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				return true;
			}
			return false;
		} catch (SQLException e) {
			e.getStackTrace();
			return true;
		} finally {
			
		}
	}
	
	//检查已添加的比赛数量是否满了
	public boolean checkNumber(String gameName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat1 = null;
		PreparedStatement stat2 = null;
		String sql1 = "select * from gdufs.game where gameName='"+gameName+"';";
		String sql2 = "select count(*) as number from gdufs.teamgame where gameName='"+gameName+"';";
		int num1 = 0;
		int num2 = 0;
		
		try {
			stat1 = con.prepareStatement(sql1);
			ResultSet rs1 = stat1.executeQuery();
			while(rs1.next()) {
				num1 = rs1.getInt("number");
			}
			
			stat2 = con.prepareStatement(sql2);
			ResultSet rs2 = stat2.executeQuery();
			while(rs2.next()) {
				num2 = rs2.getInt("number");
			}
			
			if(num1==num2) {
				return true;
			}
			else {
				return false;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			System.out.println(e.getMessage());
			return true;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat1);
			DBHelper.closePreparedStatement(stat2);
		}
	}
	
	//获取比赛的状态，未开赛，比赛中或已结束
	public String checkBegin(String gameName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "select * from gdufs.game where gameName='"+gameName+"';";
		String status = null;
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				status = rs.getString("status");
			}
			return status;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//主办方移除某支球队，只有未开赛的比赛才能移除
	public boolean deleteTeam(String gameName,String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "delete from teamgame where gameName='"+gameName+"' and teamName='"+teamName+"';";
		
		try {
			stat = con.prepareStatement(sql);
			int i = stat.executeUpdate();
			if(i>0) {
				return true;
			}
			else {
				return false;
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return false;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//获取球队类型
	public String getTeamType(String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "select * from gdufs.user where userName='"+teamName+"';";
		String teamType = null;
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				teamType = rs.getString("teamType");
			}
			return teamType;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//获取球队所有可以报名的比赛
	public ArrayList getApplyGame(String type) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.game where type='"+type+"' and status='未开赛';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				list.add(rs.getString("gameName"));
			}
			return list;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//获取该球队已经报过名但还没有被处理的比赛
	public ArrayList getApplyed(String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.apply where teamName='"+teamName+"' and status='未处理'";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				list.add(rs.getString("gameName"));
			}
			return list;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//获取该球队已经报过名但是被拒绝的比赛
	public ArrayList getApplyRejected(String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.apply where teamName='"+teamName+"' and status='拒绝'";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				list.add(rs.getString("gameName"));
			}
			return list;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//检查球队是否报名被拒绝过
	public boolean checkReject(String gameName,String teamName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "select * from gdufs.apply where gameName='"+gameName+"' and teamName='"+teamName+"' and status='拒绝';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				return true;
			}
			return false;
		} catch (SQLException e) {
			e.getStackTrace();
			return true;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//获取比赛的主办方
	public String getHold(String gameName) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		String sql = "select * from gdufs.game where gameName='"+gameName+"';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			String hold = "";
			while(rs.next()) {
				hold = rs.getString("hold");
			}
			return hold;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//主办方进入报名处理页面时显示需要处理的比赛报名
	//注：检查getThings1()和getTeamApplayed()两个方法有没有被使用和在哪里被使用!!!
	public ArrayList getApplyThings(String hold) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.apply where hold='"+hold+"' and status='未处理';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				String gameName = rs.getString("gameName");
				String teamName = rs.getString("teamName");
				TeamApply teamApply = new TeamApply(gameName,teamName);
				list.add(teamApply);
			}
			return list;
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
	
	//获取某个主办方报名处理历史
	public ArrayList getApplyDealHis(String hold) {
		Connection con = DBHelper.connect();
		PreparedStatement stat = null;
		ArrayList list = new ArrayList();
		String sql = "select * from gdufs.apply where hold='"+hold+"' and status!='未处理';";
		
		try {
			stat = con.prepareStatement(sql);
			ResultSet rs = stat.executeQuery();
			while(rs.next()) {
				String gameName = rs.getString("gameName");
				String teamName = rs.getString("teamName");
				String status = rs.getString("status");
				TeamApply teamApplyHis = new TeamApply(gameName,teamName,status);
				list.add(teamApplyHis);
			}
		} catch (SQLException e) {
			e.getStackTrace();
			return null;
		} finally {
			DBHelper.closeConneciton(con);
			DBHelper.closePreparedStatement(stat);
		}
	}
}
