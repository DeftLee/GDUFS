package graduate;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Date;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller

public class KnockoutGameGenerateController {
	final static String html=   "<head><link href='./static/css/bootstrap.min.css' rel='stylesheet'>"+ 
			"<link href='./static/css/font-awesome.min.css' rel='stylesheet'>"+ 
			"<link href='./static/css/font-face.css' rel='stylesheet'>"+ 
			"<meta charset='utf-8' />"+ 
			"<script type='text/javascript' src='./static/js/jquery-1.11.2.min.js'></script> "+   
			"<script src='./static/js/bootstrap.min.js'></script>"+  
			"<script src='./static/js/bootbox.min.js'></script></head>";
	
	//去淘汰赛生成页面
	//注：去GameManageDetail页面的时候要考虑到只有小组赛全部进行完才能开始生成淘汰赛
	//看一下用什么条件进行判断
	@RequestMapping(value = "/toKnockoutGameGenerate", method = RequestMethod.GET)
	public String toKnockoutGameGenerate(HttpSession session,Model model) {
		String userName = (String)session.getAttribute("userName"); //主办方的名字
		String gameName = (String)session.getAttribute("gameName"); //比赛名
		
		if(userName!=null) {
			GameDealDao manage = new GameDealDao();
			int aliveTeamNumber = manage.getAliveTeamNumber(gameName);
			ArrayList aliveTeam = manage.getTeamAlive(gameName);
			model.addAttribute("aliveTeamNumber",aliveTeamNumber);
			model.addAttribute("aliveTeam",aliveTeam);
			model.addAttribute("gameName",gameName);
		}
		else {
			return "LoginFirst";
		}
	}
	
	//ajax提交生成四分之一决赛,半决赛和决赛
	//思考怎么解决季军赛的问题
	@RequestMapping(value = "/GenerateKnockout", method = RequestMethod.POST)
	public void GenerateKnockout(HttpServletRequest request, HttpServletResponse response, HttpSession session,Model model) throws IOException {
		response.setContentType("text/html");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		
		String gameName = request.getParameter("gameName").trim();
		PrintWriter out = response.getWriter();
		GameDealDao manage = new GameDealDao();
		String[] aliveTeam = manage.getTeamAlive2(gameName);
		String[] knockoutGame = manage.createGame2(aliveTeam);
		String gameList = knockoutGame[0];
		for(int i=1;i<knockoutGame.length;i++) {
			gameList = gameList + "," + knockoutGame[i];
		}
		
		out.print(gameList);
		out.flush();
		out.close();
	}
	
}
