package graduate;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Date;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller

public class KnockoutGameGenerateController {
	final static String html=   "<head><link href='./static/css/bootstrap.min.css' rel='stylesheet'>"+ 
			"<link href='./static/css/font-awesome.min.css' rel='stylesheet'>"+ 
			"<link href='./static/css/font-face.css' rel='stylesheet'>"+ 
			"<meta charset='utf-8' />"+ 
			"<script type='text/javascript' src='./static/js/jquery-1.11.2.min.js'></script> "+   
			"<script src='./static/js/bootstrap.min.js'></script>"+  
			"<script src='./static/js/bootbox.min.js'></script></head>";
	
	//去淘汰赛生成页面
	//注：去GameManageDetail页面的时候要考虑到只有小组赛全部进行完才能开始生成淘汰赛
	//看一下用什么条件进行判断
	@RequestMapping(value = "/toKnockoutGameGenerate", method = RequestMethod.GET)
	public String toKnockoutGameGenerate(HttpSession session,Model model) {
		String userName = (String)session.getAttribute("userName"); //主办方的名字
		String gameName = (String)session.getAttribute("gameName"); //比赛名
		
		if(userName!=null) {
			GameDealDao manage = new GameDealDao();
			int aliveTeamNumber = manage.getAliveTeamNumber(gameName);
			ArrayList aliveTeam = manage.getTeamAlive(gameName);
			String matchType;
			if(aliveTeamNumber==8) {
				matchType = "四分之一";
			}
			else if(aliveTeamNumber==4) {
				matchType = "半决赛";
			}
			else {
				matchType = "决赛";
			}
			boolean isGenerated = manage.checkIsGenerated(gameName, matchType);
			boolean playOff = manage.checkIsGenerated(gameName, "季军赛");
			model.addAttribute("aliveTeamNumber",aliveTeamNumber);
			model.addAttribute("aliveTeam",aliveTeam);
			model.addAttribute("gameName",gameName);
			model.addAttribute("isGenerated",isGenerated);
			model.addAttribute("playOff",playOff);
			return "KnockoutGameGenerate";
		}
		else {
			return "LoginFirst";
		}
	}
	
	//ajax提交生成四分之一决赛,半决赛，决赛
	//思考怎么解决季军赛的问题
	//注：半决赛输得队存入teamgame的status为“淘汰”，名次update为“季军赛”，选择两个rank为季军赛的球队出来生成季军赛
	@RequestMapping(value = "/GenerateKnockout", method = RequestMethod.POST)
	public void GenerateKnockout(HttpServletRequest request, HttpServletResponse response, HttpSession session,Model model) throws IOException {
		response.setContentType("text/html");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		
		String gameName = request.getParameter("gameName").trim();
		PrintWriter out = response.getWriter();
		GameDealDao manage = new GameDealDao();
		String[] aliveTeam = manage.getTeamAlive2(gameName);
		String[] knockoutGame = manage.createGame2(aliveTeam);
		String gameList = knockoutGame[0];
		for(int i=1;i<knockoutGame.length;i++) {
			gameList = gameList + "," + knockoutGame[i];
		}
		
		out.print(gameList);
		out.flush();
		out.close();
	}
	
	//ajax提交生成季军赛
	@RequestMapping(value = "/GeneratePlayOff", method = RequestMethod.POST)
	public void GeneratePlayOff(HttpServletRequest request, HttpServletResponse response, HttpSession session,Model model) throws IOException {
		response.setContentType("text/html");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		
		String gameName = request.getParameter("gameName").trim();
		PrintWriter out = response.getWriter();
		GameDealDao manage = new GameDealDao();
		String playOff = manage.getPlayOff(gameName);
		
		out.print(playOff);
		out.flush();
		out.close();
	}
	
	//表单提交存入四分之一决赛,半决赛,决赛还有季军赛
	//注：提交存入之后不能再次声称相同的淘汰赛，如：生成过半决赛就不能再次生成半决赛了，如何判断
	//季军赛还需要再考虑怎么生成和存入
	@RequestMapping(value = "/setKnockout", method = RequestMethod.POST)
	public void GenerateKnockout(HttpServletRequest request, HttpServletResponse response, HttpSession session,Model model) throws IOException {
		response.setContentType("text/html");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		
		PrintWriter out = response.getWriter();
		GameDealDao manage = new GameDealDao();
		String gameName = request.getParameter("gameName").trim();
		String matchType = request.getParameter("matchType").trim();
		
		int matchNumber;
		int aliveTeamNumber = manage.getAliveTeamNumber(gameName);
		if(aliveTeamNumber==8) {
			matchNumber = 4;
		}
		else if(aliveTeamNumber==4) {
			matchNumber = 2;
		}
		else {
			matchNumber = 1;
		}
		
		for(int i=0;i<matchNumber;i++) {
			String teamA = request.getParameter("teamA"+(i+1)).trim();
			String teamB = request.getParameter("teamB"+(i+1)).trim();
			Date date = Date.valueOf(request.getParameter("date"+(i+1)).trim());
			manage.setMatch2(gameName, teamA, teamB, date, matchType);
		}
		
		out.print(html); 
		out.print("<body><script>bootbox.alert('<br><B>比赛添加成功。',function (){window.location.href='';})</script></body>");
		out.flush();
		out.close();
	}
}
