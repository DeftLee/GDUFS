package graduate;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Date;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller

public class GameDealController {
	final static String html=   "<head><link href='./static/css/bootstrap.min.css' rel='stylesheet'>"+ 
			"<link href='./static/css/font-awesome.min.css' rel='stylesheet'>"+ 
			"<link href='./static/css/font-face.css' rel='stylesheet'>"+ 
			"<meta charset='utf-8' />"+ 
			"<script type='text/javascript' src='./static/js/jquery-1.11.2.min.js'></script> "+   
			"<script src='./static/js/bootstrap.min.js'></script>"+  
			"<script src='./static/js/bootbox.min.js'></script></head>";
	
	//去赛程安排和比赛生成页面
	//既可以选择电极按钮直接自动生成比赛，也可以自己根据赛事的安排输入比赛
	@RequestMapping(value = "/toMatchManage", method = RequestMethod.GET)
	public String toTeamApply(HttpSession session,Model model) {
		String userName = (String)session.getAttribute("userName"); //主办方的名字
		String gameName = (String)session.getAttribute("gameName"); //比赛名
		
		if(userName!=null) {
			GameManageDao manage = new GameManageDao();
			GameDealDao find = new GameDealDao();
			ArrayList addedTeam = manage.getTeamAdded(gameName);
			ArrayList aliveTeam = find.getTeamAlive(gameName);
			model.addAttribute("addedTeam",addedTeam);
			model.addAttribute("aliveTeam",aliveTeam);
			model.addAttribute("gameName",gameName);
			return "MatchManage";
		}
		else {
			return "LoginFirst";
		}
	}
	
	//表单提交生成循环赛
	//ajax提交，不进行页面跳转
	@RequestMapping(value = "/GenerateRoundGame", method = RequestMethod.POST)
	public void ApproveTeamApply1(HttpServletRequest request, HttpServletResponse response, HttpSession session,Model model) throws IOException {
		response.setContentType("text/html");
		request.setCharacterEncoding("utf-8");
		response.setCharacterEncoding("utf-8");
		
		String gameName = request.getParameter("gameName").trim();
		PrintWriter out = response.getWriter();
		GameDealDao manage = new GameDealDao();
		int num = manage.getGameNumber(gameName);
		String[] allTeam = manage.getAllTeam(gameName, num);
		ArrayList vsList = manage.createGame(allTeam);
		String vsInfo = vsList.toString();
		vsInfo = vsInfo.substring(1, vsInfo.length()-1);
		
		out.print(vsInfo);
		out.flush();
		out.close();
	}
	
	//ajax提交处理杯赛小组赛小组分组
	
}
