package com.gdufs.graduation;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
public class PlayerManageController {
	final static String html=   "<head><link href='./static/css/bootstrap.min.css' rel='stylesheet'>"+ 
			"<link href='./static/css/font-awesome.min.css' rel='stylesheet'>"+ 
			"<link href='./static/css/font-face.css' rel='stylesheet'>"+ 
			"<meta charset='utf-8' />"+ 
			"<script type='text/javascript' src='./static/js/jquery-1.11.2.min.js'></script> "+   
			"<script src='./static/js/bootstrap.min.js'></script>"+  
			"<script src='./static/js/bootbox.min.js'></script> </head> "; 
	
	//放到HomeController
	@RequestMapping(value = "/toPlayerManage", method = RequestMethod.GET)
	public String toPlayerManage(HttpSession session,Model model) {
		String userName = (String)session.getAttribute("userName");
		if (userName!=null) {
			PlayerManage playerManage = new PlayerManage();
			ArrayList playerList = playerManage.findPlayer(userName);
			model.addAttribute("playerList",playerList);
			return "PlayerManage";
		}
		else {
			return "LoginFirst";
		}
	}
	
	//放到HomeController
	//去PlayerManageModify页面
	@RequestMapping(value = "/toPlayerManageModify", method = RequestMethod.GET)
	public String toPlayerManageModify(HttpSession session,Model model) {
		String userName = (String)session.getAttribute("userName");
		if (userName!=null) {
			return "PlayerManageModify";
		}
		else {
			return "LoginFirst";
		}
	}
	
	//改成PlayerCheckId，只要需要Check Id的地方都可以复用
	@RequestMapping(value = "/PlayerCheckId", method = RequestMethod.POST)
	public void PlayerCheckId(HttpServletRequest request, HttpServletResponse response, HttpSession session,Model model) throws IOException {
		response.setContentType("text/html");
		request.setCharacterEncoding("utf-8");
	    response.setCharacterEncoding("utf-8");
	    
	    PrintWriter out = response.getWriter();
	    String id = request.getParameter("id").trim();	    
	    PlayerManage playerManage = new PlayerManage();
	    String checkPlayer = playerManage.checkPlayer(id);
	    
	    if(checkPlayer.equals("exist")) {
	    	out.print("exist");
	    }
	    else if(checkPlayer.equals("ok")) {
	    	out.print("ok");
	    }
	    else {
	    	out.print("error");
	    }
	    out.flush();
		out.close();
	}
	
	//改成PlayerCheckNumber，只要需要Check Number的地方都可以复用
	@RequestMapping(value = "/PlayerCheckNumber", method = RequestMethod.POST)
	public void PlayerCheckNumber(HttpServletRequest request, HttpServletResponse response, HttpSession session,Model model) throws IOException {
		response.setContentType("text/html");
		request.setCharacterEncoding("utf-8");
	    response.setCharacterEncoding("utf-8");
	    
	    PrintWriter out = response.getWriter();
	    int number = Integer.parseInt(request.getParameter("number").trim());
	    String teamName = Integer.parseInt(request.getParameter("teamName").trim());
	    PlayerManage playerManage = new PlayerManage();
	    String checkNumber = playerManage.checkNumber(number, teamName);
	    
	    if(checkNumber.equals("exist")) {
	    	out.print("exist");
	    }
	    else if(checkNumber.equals("ok")) {
	    	out.print("ok");
	    }
	    else {
	    	out.print("error");
	    }
	    out.flush();
		out.close();
	}
	
	@RequestMapping(value = "/addPlayerDo", method = RequestMethod.POST)
	public void addPlayerDo(HttpServletRequest request, HttpServletResponse response, HttpSession session,Model model) throws IOException {
		response.setContentType("text/html");
		request.setCharacterEncoding("utf-8");
	    response.setCharacterEncoding("utf-8");
	    
	    PrintWriter out = response.getWriter();
	    String id = request.getParameter("id").trim();
	    String name = request.getParameter("name").trim();
	    String teamName = request.getParameter("teamName").trim();
	    String grade = request.getParameter("grade").trim();
	    String depart = request.getParameter("depart").trim();
	    String position = request.getParameter("position").trim();
	    int number = Integer.parseInt(request.getParameter("number").trim());
	    String role = request.getParameter("role").trim();
	    
	    PlayerManage playerManage = new PlayerManage();
	    String checkPlayer = playerManage.checkPlayer(id);
	    String checkNumber = playerManage.checkNumber(number, teamName);
	    
	    if(checkPlayer.equals("exist")) {
	    	out.print(html); 
 			out.print("<body><script>bootbox.alert('<br><B>该球员已加入本队或其他队伍，请更换其他球员。',function (){window.history.go(-1);})</script></body>"); 
	    }
	    else if(checkNumber.equals("exist")) {
	    	out.print(html); 
 			out.print("<body><script>bootbox.alert('<br><B>此号码在本队中已被占用，请更换其他号码。',function (){window.history.go(-1);})</script></body>"); 
	    }
	    else if(checkPlayer.equals("ok")&&checkNumber.equals("ok")) {
	    	boolean checkAdd = playerManage.addPlayer(id, name, teamName, grade, depart, position, number, role);
	    	if(checkAdd) {
	    		out.print(html); 
	 			out.print("<body><script>bootbox.alert('<br><B>球员添加成功。',function (){window.location.href='toPlayerManage';})</script></body>");
	    	}
	    	else {
	    		out.print(html); 
	 			out.print("<body><script>bootbox.alert('<br><B>系统错误，请再试一次。',function (){window.history.go(-1);})</script></body>");
	    	}
	    }
	    else {
	    	out.print(html); 
 			out.print("<body><script>bootbox.alert('<br><B>系统错误，请再试一次。',function (){window.history.go(-1);})</script></body>");
	    }
	    out.flush();
		out.close();
	}
	
	@RequestMapping(value = "/deletePlayerDo", method = RequestMethod.POST)
	public void deletePlayerDo(HttpServletRequest request, HttpServletResponse response, HttpSession session,Model model) throws IOException {
		response.setContentType("text/html");
		request.setCharacterEncoding("utf-8");
	    response.setCharacterEncoding("utf-8");
	    
	    PrintWriter out = response.getWriter();
	    String id = request.getParameter("id").trim();
	    PlayerManage playerManage = new PlayerManage();
	    boolean checkDelete = playerManage.deletePlayer(id);
	    
	    if(checkDelete) {
	    	out.print(html); 
 			out.print("<body><script>bootbox.alert('<br><B>成功移除球员。',function (){window.location.href='toPlayerManage';})</script></body>");
	    }
	    else {
	    	out.print(html); 
 			out.print("<body><script>bootbox.alert('<br><B>系统错误，请再试一次。',function (){window.history.go(-1);})</script></body>");
	    }
	    out.flush();
		out.close();
	}
	
	//修改球员id的时候，用上面的PlayerCheckId来检查修改的id是否重复
	//修改球员号码的时候，用上面的PlayerCheckNumber来检查修改的number是否重复
	
	@RequestMapping(value = "/modifyPlayerDo", method = RequestMethod.POST)
	public void modifyPlayerDo(HttpServletRequest request, HttpServletResponse response, HttpSession session,Model model) throws IOException {
		response.setContentType("text/html");
		request.setCharacterEncoding("utf-8");
	    response.setCharacterEncoding("utf-8");
	    
	    String id = request.getParameter("id").trim();
	    String name = request.getParameter("name").trim();
	    String teamName = request.getParameter("teamName").trim();
	    String grade = request.getParameter("grade").trim();
	    String depart = request.getParameter("depart").trim();
	    String position = request.getParameter("position").trim();
	    int number = Integer.parseInt(request.getParameter("number").trim());
	    String role = request.getParameter("role").trim();
	   
	    PrintWriter out = response.getWriter();
	    PlayerManage playerManage = new PlayerManage();
	    String checkPlayer = playerManage.checkPlayer(id);
	    String checkNumber = playerManage.checkNumber(number, teamName);
	    
	    if(checkPlayer.equals("exist")) {
	    	out.print(html); 
 			out.print("<body><script>bootbox.alert('<br><B>该球员已加入本队或其他队伍，请检查输入是否有误。',function (){window.history.go(-1);})</script></body>"); 
	    }
	    else if(checkNumber.equals("exist")) {
	    	out.print(html); 
 			out.print("<body><script>bootbox.alert('<br><B>此号码在本队中已被占用，请更换其他号码。',function (){window.history.go(-1);})</script></body>");
	    }
	    else if(checkPlayer.equals("ok")&&checkNumber.equals("ok")) {
	    	boolean checkModify = playerManage.modifyPlayer(id, name, teamName, grade, depart, position, number, role);
	    	if(checkModify) {
	    		out.print(html); 
	 			out.print("<body><script>bootbox.alert('<br><B>球员信息修改成功。',function (){window.location.href='toPlayerManage';})</script></body>");
	    	}
	    	else {
	    		out.print(html); 
	 			out.print("<body><script>bootbox.alert('<br><B>系统错误，请再试一次。',function (){window.history.go(-1);})</script></body>");
	    	}
	    }
	    else {
	    	out.print(html); 
 			out.print("<body><script>bootbox.alert('<br><B>系统错误，请再试一次。',function (){window.history.go(-1);})</script></body>");
	    }
	    out.flush();
		out.close();
	}
}
